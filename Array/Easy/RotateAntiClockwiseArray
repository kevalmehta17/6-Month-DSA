// logic:-Why (i - d + n) % n:
// i - d: This shifts the index i to the left by d positions, which is what we want for a counter-clockwise rotation.
// + n: This ensures that if i - d is negative (which happens when i < d), adding n will bring it into the valid range of indices (i.e., between 0 and n-1).
// % n: The modulo operation wraps the index back into the valid range of indices from 0 to n-1 if necessary.

class Solution {
  public:

    // Function to rotate an array by d elements in counter-clockwise direction.
    void rotateArr(vector<int>& arr, int d) {
        int n = arr.size();
        d = d % n;  // To handle cases where d is larger than n
        
        // Create a temporary array to store the rotated result
        vector<int> temp(n);
        for(int i =0; i<n; i++){
            temp[(i-d+n)%n] = arr[i];
        }
        for(int i = 0; i < n; i++) {
            arr[i] = temp[i];
        }
    }
};